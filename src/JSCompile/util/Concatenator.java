package jscompile.util;

import jscompile.domain.JSArtifact;

import java.util.ArrayList;

public class Concatenator {

    private StringBuilder source = null;
    private boolean exported = false;
    private boolean pretty = true;
    private String rootNameSpace = "";

    public Concatenator(String packageName, ArrayList<String>namespaces, boolean prettyPrint){
        this.pretty = prettyPrint;
        init(packageName, namespaces);
    }

    public Concatenator(String packageName, ArrayList<String>namespaces){
        init(packageName, namespaces);
    }

    private void init(String packageName, ArrayList<String>namespaces){
        this.source = new StringBuilder();
        writeHeader(packageName);
        writeNamespaces(namespaces);
        this.rootNameSpace = namespaces.get(0);
    }


    public void add(JSArtifact artifact){
        if(!exported){
            writeNamespaceMemberDefinition(artifact.getNamespace(), artifact.getName(), artifact.dependencies, artifact.getSource());
        }

    }

    public String export(){
        writeFooter();
        return source.toString();
    }





    private void writeIndent(){
        source.append("    ");
    }

    private void writeIndent(int numberOfIndents){
        for(int i=0; i<numberOfIndents; i++){
            writeIndent();
        }
    }

    private void writeHeader(String packageName){
        source.append("// Generated by jscompile (https://github.com/rliota/jscompile) on ");
        source.append(new java.util.Date());
        source.append("\n");
        source.append("function initialize");
        source.append(packageName);
        source.append("(){\n");
    }

    private void writeNamespaces(ArrayList<String> namespaceList){
        writeIndent();
        source.append("var ");
        for(String namespace : namespaceList){
            source.append(namespace);
            source.append(" = {};\n");
            writeIndent();
        }
        source.append("\n");
    }

    private void writeNamespaceMemberDefinition(String namespace, String memberName, ArrayList<String> dependencies, String memberSource){
        writeIndent();
        source.append(namespace);
        source.append(".");
        source.append(memberName);
        source.append(" = (function(");
        int dependenciesLength = dependencies.size();
        for(int i=0; i<dependenciesLength; i++){
            if(i>0){
                source.append(", ");
            }
            String dependencyNamespace = dependencies.get(i);
            String[] dependencyPackageParts = dependencyNamespace.split("\\.");
            source.append(dependencyPackageParts[dependencyPackageParts.length-1]); // There is no good reason a null pointer exception should occur here.
        }
        source.append("){\n");
        if(pretty){
            source.append(memberSource.replaceAll("\n", "\n        "));
        }else{
            source.append(memberSource);
        }
        source.append('\n');
        writeIndent(2);
        source.append("return ");
        source.append(memberName);
        source.append(";\n");
        writeIndent();
        source.append("}(");

        if(dependenciesLength > 0){
            source.append("\n");
        }

        for(int i=0; i<dependenciesLength; i++){
            if(i>0){
                source.append(",\n");
            }
            String dependencyNamespace = dependencies.get(i);
            writeIndent(2);
            source.append(dependencyNamespace);
        }

        if(dependenciesLength > 0){
            source.append('\n');
            writeIndent();
        }
        source.append("));\n\n");
    }

    private void writeFooter(){
        source.append("    return ");
        source.append(rootNameSpace);
        source.append(";\n}");
    }

}
